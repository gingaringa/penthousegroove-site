name: QA Scheduled Deploy & Notify (v2)
on:
  schedule:
    # 07:10 JST（UTC 22:10）
    - cron: '10 22 * * *'
  workflow_dispatch:

permissions:
  contents: write

env:
  TZ: Asia/Tokyo

jobs:
  qa-scheduled:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout qa branch
        uses: actions/checkout@v4
        with:
          ref: qa

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Rebuild recommend.json (guarded)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f scripts/rebuild-recommend.mjs ]; then
            node scripts/rebuild-recommend.mjs
          else
            echo "skip: no scripts/rebuild-recommend.mjs"
            mkdir -p public
            [ -f public/recommend.json ] || echo '{"items":[]}' > public/recommend.json

          fi

      - name: Filter recommend.json to <= today (JST)
        shell: bash
        run: |
          set -eo pipefail
          node - <<'JS'
          const fs = require('fs');
          const p = 'public/recommend.json';
          if (!fs.existsSync(p)) { console.log('skip: recommend.json missing'); process.exit(0); }
          const d = JSON.parse(fs.readFileSync(p,'utf8'));
          const items = Array.isArray(d) ? d : (Array.isArray(d.items) ? d.items : []);
          const today = new Date().toISOString().slice(0,10);
          const out = items.filter(x => (x.date || '') <= today);
          fs.writeFileSync(p, JSON.stringify({items: out}, null, 2));
          JS

      - name: Ingest (no commit; guarded)
        shell: bash
        run: |
          set -e
          if [ -f scripts/ingest-today.mjs ]; then
            node scripts/ingest-today.mjs || { echo "warn: ingest failed (continuing)"; }
          else
            echo "skip: scripts/ingest-today.mjs missing"
          fi

      - name: Update updates.json (no commit; guarded)
        shell: bash
        run: |
          set -e
          if [ -f scripts/update-updates-json.mjs ]; then
            node scripts/update-updates-json.mjs || { echo "warn: update-updates-json failed (continuing)"; }
          else
            echo "skip: scripts/update-updates-json.mjs missing"
          fi

      # ← ここをヒアドキュメント→node -e に置換
      - name: Generate pages (guarded)
        shell: bash
        working-directory: public
        run: |
          set -e
          if [ -f generate-recommend-pages.js ] && [ -f recommend.json ]; then
            cp recommend.json recommend.orig.json
            node -e "const fs=require('fs');const p='recommend.json';const d=JSON.parse(fs.readFileSync(p,'utf8'));const items=Array.isArray(d)?d:(Array.isArray(d.items)?d.items:[]);fs.writeFileSync('_recommend.gen.json', JSON.stringify(items,null,2));"
            mv _recommend.gen.json recommend.json
            node generate-recommend-pages.js || { echo 'warn: page generation failed (continuing)'; }
            mv -f recommend.orig.json recommend.json || true
          else
            echo 'skip: generator or recommend.json missing'
          fi

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Sync to QA S3 (guarded)
        shell: bash
        env:
          QA_BUCKET: ${{ secrets.S3_BUCKET_QA }}
        run: |
          set -e
          if [ -n "${QA_BUCKET:-}" ]; then
            aws s3 sync public "s3://${QA_BUCKET}/" --delete \
              --exclude "*" \
              --include "recommend.json" \
              --include "updates.json" \
              --include "recommend.html" \
              --include "recommend_pages/*"
          else
            echo "skip: S3_BUCKET_QA is empty"
          fi

      - name: Invalidate QA CloudFront (guarded)
        shell: bash
        env:
          QA_CF_ID: ${{ secrets.CF_DISTRIBUTION_ID_QA }}
        run: |
          set -e
          if [ -n "${QA_CF_ID:-}" ]; then
            L=$(TZ=Asia/Tokyo date +%F)
            aws cloudfront create-invalidation --distribution-id "$QA_CF_ID" \
              --paths "/updates.json" "/recommend.json" "/recommend_pages/recommend-${L}.html" "/recommend.html"
          else
            echo "skip: CF_DISTRIBUTION_ID_QA is empty"
          fi

      - name: Commit updates.json back to qa (keep Git in sync)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f public/updates.json ]; then
            echo "skip: public/updates.json not found"
            exit 0
          fi
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch origin qa
          git add public/updates.json
          if git diff --cached --quiet; then
            echo "no changes in updates.json; skip commit"
            exit 0
          fi
          git commit -m "qa(ci): keep updates.json up to date (autocommit) [skip ci]"
          git push origin HEAD:qa
      - name: Trigger QA notify (guarded)
        shell: bash
        env:
          QA_NOTIFY_URL:   ${{ secrets.QA_NOTIFY_URL }}
          QA_NOTIFY_TOKEN: ${{ secrets.QA_NOTIFY_TOKEN }}
        run: |
          set -e
          if [ -n "${QA_NOTIFY_URL:-}" ] && [ -n "${QA_NOTIFY_TOKEN:-}" ]; then
            curl -fSs -X POST "$QA_NOTIFY_URL/admin/notify-send?token=$QA_NOTIFY_TOKEN" || true
          else
            echo '{"sent": false, "reason":"missing notify secrets"}'
          fi
