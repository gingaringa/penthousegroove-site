name: QA Scheduled Deploy & Notify

on:
  schedule:
    # JST 07:10（UTC 22:10 前日）
    - cron: '10 22 * * *'
  workflow_dispatch:

permissions:
  contents: write

env:
  TZ: Asia/Tokyo

jobs:
  qa-scheduled:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: qa

      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      # ① full rebuild（recommend.json を冪等に再構築）
      - name: Ingest (full rebuild)
        run: |
          node - <<'JS'
          import fs from 'fs'; import path from 'path';
          const pub = 'public/recommend.json';
          let base=[]; if (fs.existsSync(pub)) { try { base = JSON.parse(fs.readFileSync(pub,'utf-8')); } catch {}
          }
          const map = new Map();
          for (const it of base) if (it?.date) map.set(it.date, it);
          const dir='content/daily';
          if (fs.existsSync(dir)) {
            for (const f of fs.readdirSync(dir)) {
              if (!/^\d{4}-\d{2}-\d{2}\.json$/.test(f)) continue;
              try {
                const d=JSON.parse(fs.readFileSync(path.join(dir,f),'utf-8'));
                if (d?.date) map.set(d.date, d); // daily wins
              } catch {}
            }
          }
          const arr=Array.from(map.values()).sort((a,b)=> String(a.date).localeCompare(String(b.date)));
          fs.writeFileSync(pub, JSON.stringify(arr,null,2));
          console.log('[rebuild] wrote', arr.length, 'entries');
          JS

      # ② updates.json（recommend.message）更新
      - name: Update updates.json (no commit)
        run: node scripts/update-updates-json.mjs

      - name: Bump updates.json recommend.lastUpdate (auto)
        run: |
          python - <<'PY'
          import json,glob,io,re,datetime
          files = glob.glob('content/daily/*.json')
          dates=[]
          for p in files:
            m=re.search(r'(\d{4}-\d{2}-\d{2})\.json$', p)
            if m: dates.append(m.group(1))
          today=datetime.date.today().isoformat()
          dates=[d for d in dates if d<=today]
          latest = max(dates).replace('-','') if dates else today.replace('-','')
          path='public/updates.json'
          d=json.load(io.open(path,encoding='utf-8'))
          d.setdefault('recommend',{})['lastUpdate']=latest
          with io.open(path,'w',encoding='utf-8') as f:
            json.dump(d,f,ensure_ascii=False,indent=2)
          print('lastUpdate ->', latest)
          PY

      # ③ Filter recommend.json to <= today (JST)
      - name: Filter recommend.json to <= today (JST)
        run: |
          cp public/recommend.json /tmp/recommend.full.json
          python - <<'PY'
          import json, datetime
          try:
            from zoneinfo import ZoneInfo
          except ImportError:
            from backports.zoneinfo import ZoneInfo  # runner fallback
          with open('public/recommend.json','r',encoding='utf-8') as f:
              arr=json.load(f)
          today=datetime.datetime.now(ZoneInfo("Asia/Tokyo")).date().isoformat()
          filtered=[x for x in arr if x.get('date','') <= today]
          with open('public/recommend.json','w',encoding='utf-8') as f:
              json.dump(filtered, f, ensure_ascii=False, indent=2)
          print('filtered to <= ', today, ' count=', len(filtered))
          PY

      # ④ HTML 生成
      - name: Generate pages
        working-directory: public
        run: node generate-recommend-pages.js

      # ⑦ AWS 認証
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      # ⑧ S3(QA) へ必要ファイルだけ同期
      - name: Sync to QA S3
        env: { QA_BUCKET: ${{ secrets.S3_BUCKET_QA }} }
        run: |
          aws s3 sync public "s3://${QA_BUCKET}/" --delete \
            --exclude "*" \
            --include "recommend.json" \
            --include "updates.json" \
            --include "recommend.html" \
            --include "recommend_pages/*"

      # ⑨ CloudFront(QA) 最小無効化（recommend.html も追加）
      - name: Invalidate QA CloudFront (targeted)
        env: { QA_CF_ID: ${{ secrets.CF_DISTRIBUTION_ID_QA }} }
        run: |
          L=$(TZ=Asia/Tokyo date +%F)
          aws cloudfront create-invalidation \
            --distribution-id "${{ secrets.CF_DISTRIBUTION_ID_QA }}" \
            --paths "/updates.json" "/recommend.json" "/recommend.html" "/recommend_pages/recommend-${L}.html"

      # ⑩（任意）反映確認
      - name: Wait until CloudFront shows new lastUpdate
        run: |
          set -e
          WANT=$(python - <<'PY'
          import json; print((json.load(open('public/updates.json')).get('recommend') or {}).get('lastUpdate',''))
          PY
          )
          URL="https://d1xxonlnsg0phc.cloudfront.net/updates.json?ts=$(date +%s)"
          for i in $(seq 1 15); do
            CUR=$(curl -fSs "$URL" | python - <<'PY'
          import sys,json; print((json.load(sys.stdin).get('recommend') or {}).get('lastUpdate',''))
          PY
          )
            echo "try#$i want=$WANT got=$CUR"
            [ "$CUR" = "$WANT" ] && exit 0
            sleep 8
          done
          exit 0

      # ⑪ QA 通知（シークレットが設定されていれば実行）
      - name: Trigger QA notify
        if: ${{ secrets.QA_NOTIFY_URL != '' && secrets.QA_NOTIFY_TOKEN != '' }}
        run: |
          curl -fSs -X POST "${{ secrets.QA_NOTIFY_URL }}/admin/notify-send?token=${{ secrets.QA_NOTIFY_TOKEN }}"

      - name: Restore full recommend.json
        run: |
          test -f /tmp/recommend.full.json && mv /tmp/recommend.full.json public/recommend.json || true

      - name: Commit artifacts back to QA
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A public
          git commit -m "ci(qa): auto-update artifacts ($(date -u +%F))" || echo "no changes"
          git push origin HEAD:qa
